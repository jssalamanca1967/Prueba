/* ========================================================================
 * Copyright 2014 ClinicaKennedy
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 ClinicaKennedy

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.ClinicaKennedy.reporte.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.ClinicaKennedy.reporte.logic.dto.ReportePageDTO;
import co.edu.uniandes.csw.ClinicaKennedy.reporte.logic.dto.ReporteDTO;
import co.edu.uniandes.csw.ClinicaKennedy.reporte.logic.api.IReporteLogicService;
import co.edu.uniandes.csw.ClinicaKennedy.reporte.persistence.ReportePersistence;
import co.edu.uniandes.csw.ClinicaKennedy.reporte.persistence.api.IReportePersistence;
import co.edu.uniandes.csw.ClinicaKennedy.reporte.persistence.entity.ReporteEntity;
import co.edu.uniandes.csw.ClinicaKennedy.reporte.persistence.converter.ReporteConverter;
import static co.edu.uniandes.csw.ClinicaKennedy.util._TestUtil.*;

@RunWith(Arquillian.class)
public class ReporteLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(ReporteLogicService.class.getPackage())
				.addPackage(IReporteLogicService.class.getPackage())
				.addPackage(ReportePersistence.class.getPackage())
				.addPackage(ReporteEntity.class.getPackage())
				.addPackage(IReportePersistence.class.getPackage())
                .addPackage(ReporteDTO.class.getPackage())
                .addPackage(ReporteConverter.class.getPackage())
                .addPackage(ReporteEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IReporteLogicService reporteLogicService;
	
	@Inject
	private IReportePersistence reportePersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<ReporteDTO> dtos=reportePersistence.getReportes();
		for(ReporteDTO dto:dtos){
			reportePersistence.deleteReporte(dto.getId());
		}
	}

	private List<ReporteDTO> data=new ArrayList<ReporteDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			ReporteDTO pdto=new ReporteDTO();
			pdto.setActividadFisica(generateRandom(String.class));
			pdto.setAlimentacion(generateRandom(String.class));
			pdto.setFechaPublicacion(generateRandomDate());
			pdto.setGravedad(generateRandom(String.class));
			pdto.setName(generateRandom(String.class));
			pdto.setLocalizacionDolor(generateRandom(String.class));
			pdto.setPatronDeSueno(generateRandom(String.class));
			pdto=reportePersistence.createReporte(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createReporteTest(){
		ReporteDTO ldto=new ReporteDTO();
		ldto.setActividadFisica(generateRandom(String.class));
		ldto.setAlimentacion(generateRandom(String.class));
		ldto.setFechaPublicacion(generateRandomDate());
		ldto.setGravedad(generateRandom(String.class));
		ldto.setName(generateRandom(String.class));
		ldto.setLocalizacionDolor(generateRandom(String.class));
		ldto.setPatronDeSueno(generateRandom(String.class));
		
		
		ReporteDTO result=reporteLogicService.createReporte(ldto);
		
		Assert.assertNotNull(result);
		
		ReporteDTO pdto=reportePersistence.getReporte(result.getId());
		
		Assert.assertEquals(ldto.getActividadFisica(), pdto.getActividadFisica());	
		Assert.assertEquals(ldto.getAlimentacion(), pdto.getAlimentacion());	
		Assert.assertEquals(ldto.getFechaPublicacion(), pdto.getFechaPublicacion());	
		Assert.assertEquals(ldto.getGravedad(), pdto.getGravedad());	
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getLocalizacionDolor(), pdto.getLocalizacionDolor());	
		Assert.assertEquals(ldto.getPatronDeSueno(), pdto.getPatronDeSueno());	
	}
	
	@Test
	public void getReportesTest(){
		List<ReporteDTO> list=reporteLogicService.getReportes();
		Assert.assertEquals(list.size(), data.size());
        for(ReporteDTO ldto:list){
        	boolean found=false;
            for(ReporteDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getReporteTest(){
		ReporteDTO pdto=data.get(0);
		ReporteDTO ldto=reporteLogicService.getReporte(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getActividadFisica(), ldto.getActividadFisica());
		Assert.assertEquals(pdto.getAlimentacion(), ldto.getAlimentacion());
		Assert.assertEquals(pdto.getFechaPublicacion(), ldto.getFechaPublicacion());
		Assert.assertEquals(pdto.getGravedad(), ldto.getGravedad());
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getLocalizacionDolor(), ldto.getLocalizacionDolor());
		Assert.assertEquals(pdto.getPatronDeSueno(), ldto.getPatronDeSueno());
        
	}
	
	@Test
	public void deleteReporteTest(){
		ReporteDTO pdto=data.get(0);
		reporteLogicService.deleteReporte(pdto.getId());
        ReporteDTO deleted=reportePersistence.getReporte(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateReporteTest(){
		ReporteDTO pdto=data.get(0);
		
		ReporteDTO ldto=new ReporteDTO();
		ldto.setId(pdto.getId());
		ldto.setActividadFisica(generateRandom(String.class));
		ldto.setAlimentacion(generateRandom(String.class));
		ldto.setFechaPublicacion(generateRandomDate());
		ldto.setGravedad(generateRandom(String.class));
		ldto.setName(generateRandom(String.class));
		ldto.setLocalizacionDolor(generateRandom(String.class));
		ldto.setPatronDeSueno(generateRandom(String.class));
		
		
		reporteLogicService.updateReporte(ldto);
		
		
		ReporteDTO resp=reportePersistence.getReporte(pdto.getId());
		
		Assert.assertEquals(ldto.getActividadFisica(), resp.getActividadFisica());	
		Assert.assertEquals(ldto.getAlimentacion(), resp.getAlimentacion());	
		Assert.assertEquals(ldto.getFechaPublicacion(), resp.getFechaPublicacion());	
		Assert.assertEquals(ldto.getGravedad(), resp.getGravedad());	
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getLocalizacionDolor(), resp.getLocalizacionDolor());	
		Assert.assertEquals(ldto.getPatronDeSueno(), resp.getPatronDeSueno());	
	}
	
	@Test
	public void getReportePaginationTest(){
		
		ReportePageDTO dto1=reporteLogicService.getReportes(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		ReportePageDTO dto2=reporteLogicService.getReportes(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(ReporteDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(ReporteDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(ReporteDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(ReporteDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        ReportePageDTO dto3=reporteLogicService.getReportes(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(ReporteDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(ReporteDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}