/* ========================================================================
 * Copyright 2014 ClinicaKennedy
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 ClinicaKennedy

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.ClinicaKennedy.paciente.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.ClinicaKennedy.paciente.logic.dto.PacientePageDTO;
import co.edu.uniandes.csw.ClinicaKennedy.paciente.logic.dto.PacienteDTO;
import co.edu.uniandes.csw.ClinicaKennedy.paciente.logic.api.IPacienteLogicService;
import co.edu.uniandes.csw.ClinicaKennedy.paciente.persistence.PacientePersistence;
import co.edu.uniandes.csw.ClinicaKennedy.paciente.persistence.api.IPacientePersistence;
import co.edu.uniandes.csw.ClinicaKennedy.paciente.persistence.entity.PacienteEntity;
import co.edu.uniandes.csw.ClinicaKennedy.paciente.persistence.converter.PacienteConverter;
import static co.edu.uniandes.csw.ClinicaKennedy.util._TestUtil.*;

@RunWith(Arquillian.class)
public class PacienteLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(PacienteLogicService.class.getPackage())
				.addPackage(IPacienteLogicService.class.getPackage())
				.addPackage(PacientePersistence.class.getPackage())
				.addPackage(PacienteEntity.class.getPackage())
				.addPackage(IPacientePersistence.class.getPackage())
                .addPackage(PacienteDTO.class.getPackage())
                .addPackage(PacienteConverter.class.getPackage())
                .addPackage(PacienteEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IPacienteLogicService pacienteLogicService;
	
	@Inject
	private IPacientePersistence pacientePersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<PacienteDTO> dtos=pacientePersistence.getPacientes();
		for(PacienteDTO dto:dtos){
			pacientePersistence.deletePaciente(dto.getId());
		}
	}

	private List<PacienteDTO> data=new ArrayList<PacienteDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			PacienteDTO pdto=new PacienteDTO();
			pdto.setAlturaMetros(generateRandom(Double.class));
			pdto.setEdad(generateRandom(Integer.class));
			pdto.setName(generateRandom(String.class));
			pdto.setPesoKg(generateRandom(Double.class));
			pdto.setDocumentoIdentificacion(generateRandom(Long.class));
			pdto=pacientePersistence.createPaciente(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createPacienteTest(){
		PacienteDTO ldto=new PacienteDTO();
		ldto.setAlturaMetros(generateRandom(Double.class));
		ldto.setEdad(generateRandom(Integer.class));
		ldto.setName(generateRandom(String.class));
		ldto.setPesoKg(generateRandom(Double.class));
		ldto.setDocumentoIdentificacion(generateRandom(Long.class));
		
		
		PacienteDTO result=pacienteLogicService.createPaciente(ldto);
		
		Assert.assertNotNull(result);
		
		PacienteDTO pdto=pacientePersistence.getPaciente(result.getId());
		
		Assert.assertEquals(ldto.getAlturaMetros(), pdto.getAlturaMetros());	
		Assert.assertEquals(ldto.getEdad(), pdto.getEdad());	
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getPesoKg(), pdto.getPesoKg());	
		Assert.assertEquals(ldto.getDocumentoIdentificacion(), pdto.getDocumentoIdentificacion());	
	}
	
	@Test
	public void getPacientesTest(){
		List<PacienteDTO> list=pacienteLogicService.getPacientes();
		Assert.assertEquals(list.size(), data.size());
        for(PacienteDTO ldto:list){
        	boolean found=false;
            for(PacienteDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getPacienteTest(){
		PacienteDTO pdto=data.get(0);
		PacienteDTO ldto=pacienteLogicService.getPaciente(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getAlturaMetros(), ldto.getAlturaMetros());
		Assert.assertEquals(pdto.getEdad(), ldto.getEdad());
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getPesoKg(), ldto.getPesoKg());
		Assert.assertEquals(pdto.getDocumentoIdentificacion(), ldto.getDocumentoIdentificacion());
        
	}
	
	@Test
	public void deletePacienteTest(){
		PacienteDTO pdto=data.get(0);
		pacienteLogicService.deletePaciente(pdto.getId());
        PacienteDTO deleted=pacientePersistence.getPaciente(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updatePacienteTest(){
		PacienteDTO pdto=data.get(0);
		
		PacienteDTO ldto=new PacienteDTO();
		ldto.setId(pdto.getId());
		ldto.setAlturaMetros(generateRandom(Double.class));
		ldto.setEdad(generateRandom(Integer.class));
		ldto.setName(generateRandom(String.class));
		ldto.setPesoKg(generateRandom(Double.class));
		ldto.setDocumentoIdentificacion(generateRandom(Long.class));
		
		
		pacienteLogicService.updatePaciente(ldto);
		
		
		PacienteDTO resp=pacientePersistence.getPaciente(pdto.getId());
		
		Assert.assertEquals(ldto.getAlturaMetros(), resp.getAlturaMetros());	
		Assert.assertEquals(ldto.getEdad(), resp.getEdad());	
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getPesoKg(), resp.getPesoKg());	
		Assert.assertEquals(ldto.getDocumentoIdentificacion(), resp.getDocumentoIdentificacion());	
	}
	
	@Test
	public void getPacientePaginationTest(){
		
		PacientePageDTO dto1=pacienteLogicService.getPacientes(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		PacientePageDTO dto2=pacienteLogicService.getPacientes(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(PacienteDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(PacienteDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(PacienteDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(PacienteDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        PacientePageDTO dto3=pacienteLogicService.getPacientes(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(PacienteDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(PacienteDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}